; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html
; Configuration for PlatformIO itself
;   default_envs points to a specific environment.
;   e.g. `usb-debug`, `usb-prod` or `ota`
[platformio]
default_envs = wesp32-devel-uart

; * [base]
;     -> [devel]
;     -> [release]
; * [board_wrover]
; * [board_micro]
;
; * [env:wrover-release-uart]
;    release + board_wrover + LOG_SILENT
; * [env:wrover-devel-uart]
;    devel   + board_wrover + LOG_NOTICE
; * [env:wrover-devel-armusb]
;    devel   + board_wrover + LOG_NOTICE + debugger config
;
; `base` environment
;   This is the root environment which each specific environment stems from.
;
;   `build_flags` uses Dynamic build flags.
;   See also:
;     - Dynamic build flags:
;       https://docs.platformio.org/en/latest/projectconf/section_env_build.html#dynamic-build-flags
;
;   `espressif32` platform with `arduino` framework
;     - espressif/arduino-esp32
;       License: LGPL-2.1
;       https://github.com/espressif/arduino-esp32
;   `Espressif ESP32 Dev Module
;       https://docs.platformio.org/en/latest/boards/espressif32/esp32dev.html
;
;   Libraries
;     - ArduinoLog library:
;       https://github.com/thijse/Arduino-Log
;       https://registry.platformio.org/libraries/thijse/ArduinoLog
;       LOG_LEVEL:
;         0: LOG_LEVEL_SILENT   no output
;         1: LOG_LEVEL_FATAL    fatal errors
;         2: LOG_LEVEL_ERROR    all errors
;         3: LOG_LEVEL_WARNING  errors, and warnings
;         4: LOG_LEVEL_NOTICE   errors, warnings and notices
;         5: LOG_LEVEL_TRACE    errors, warnings, notices & traces
;         6: LOG_LEVEL_VERBOSE  all
;     - SimpleSerialShell
;       https://github.com/philj404/SimpleSerialShell
;       https://registry.platformio.org/libraries/philj404/SimpleSerialShell
;     - IRremote
;       https://github.com/Arduino-IRremote/Arduino-IRremote
;       https://registry.platformio.org/libraries/z3t0/IRremote
[base]
framework         = arduino
build_flags       = !python version_macro.py
lib_deps_external =
    z3t0/IRremote              @ ^3.7.1  ; MIT license
    thijse/ArduinoLog          @ ^1.1.1  ; MIT license
    philj404/SimpleSerialShell @ ^0.9.2  ; MIT license

[devel]
extends     = base
build_flags =
    ${base.build_flags}
    -DCORE_DEBUG_LEVEL=6
monitor_port    = /dev/ttyIRControl
monitor_speed   = 115200

[release]
extends     = base
build_flags =
    ${base.build_flags}
    -DCORE_DEBUG_LEVEL=0

[board_wesp32]
platform         = espressif32 @^5.0.0
board            = wesp32
lib_deps_builtin = Preferences
build_flags      = -D SEND_PWM_BY_TIMER
                   -D NO_LED_FEEDBACK_CODE
                   -D IR_SEND_PIN=23

[board_wrover]
platform         = espressif32 @^5.0.0
board            = esp32dev
lib_deps_builtin = Preferences
build_flags      = -DBOARD_HAS_PSRAM
		   -mfix-esp32-psram-cache-issue

[board_micro]
platform         = atmelavr
board            = micro
lib_deps_builtin = EEPROM

[upload_uart]
upload_protocol = esptool
upload_port     = /dev/ttyIRControl
upload_speed    = 921600

[upload_armusb]
upload_protocol = olimex-arm-usb-tiny-h
upload_port     = /dev/ttyARMUSB
debug_tool  = olimex-arm-usb-tiny-h
debug_speed = 2000

[env:wrover-release-uart]
extends     = release, board_wrover, upload_usb
build_flags =
    ${release.build_flags}
    ${board_wrover.build_flags}
lib_deps    =
    ${release.lib_deps_external}
    ${board_wrover.lib_deps_builtin}

[env:wesp32-release-uart]
extends     = release, board_wesp32, upload_usb
build_flags =
    ${release.build_flags}
    ${board_wesp32.build_flags}
lib_deps    =
    ${release.lib_deps_external}
    ${board_wesp32.lib_deps_builtin}

[env:wrover-devel-uart]
extends     = devel, board_wrover, upload_usb
build_flags =
    ${devel.build_flags}
    ${board_wrover.build_flags}
lib_deps    =
    ${release.lib_deps_external}
    ${board_wrover.lib_deps_builtin}

[env:wesp32-devel-uart]
extends     = devel, board_wesp32, upload_usb
build_flags =
    ${devel.build_flags}
    ${board_wesp32.build_flags}
lib_deps    =
    ${release.lib_deps_external}
    ${board_wesp32.lib_deps_builtin}

[env:wrover-debug-armusb]
extends     = devel, board_wrover, upload_armusb
build_flags =
    ${release.build_flags}
    ${board_wrover.build_flags}
lib_deps    =
    ${release.lib_deps_external}
    ${board_wrover.lib_deps_builtin}
